// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Api {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SA2FwaSJFCgVFcnJvchIMCgRjb2RlGAEgASgFEg8KB21l",
            "c3NhZ2UYAiABKAkiHQoEQ29kZRIVChFSVU5USU1FX0VYQ0VQVElPThAAIpEB",
            "CghFbnZlbG9wZRIUCgxjb2xsYXRpb25faWQYASABKAUSGwoFZXJyb3IYAiAB",
            "KAsyCi5hcGkuRXJyb3JIABIjCglIZWFydGJlYXQYAyABKAsyDi5hcGkuSGVh",
            "cnRiZWF0SAASIgoGZ3JvdXBzGAQgASgLMhAuYXBpLlRHcm91cHNMaXN0SABC",
            "CQoHcGF5bG9hZCILCglIZWFydGJlYXQiiAEKC1RHcm91cHNMaXN0EhIKCnBh",
            "Z2VfbGltaXQYASABKAMSFAoMb3JkZXJfYnlfYXNjGAIgASgIEg4KBGxhbmcY",
            "AyABKAlIABIUCgpjcmVhdGVkX2F0GAQgASgDSAASDwoFY291bnQYBSABKANI",
            "ABIOCgZjdXJzb3IYByABKAlCCAoGZmlsdGVyQg2qAgpDb21tb24uQXBpYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Api.Error), global::Common.Api.Error.Parser, new[]{ "Code", "Message" }, null, new[]{ typeof(global::Common.Api.Error.Types.Code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Api.Envelope), global::Common.Api.Envelope.Parser, new[]{ "CollationId", "Error", "Heartbeat", "Groups" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Api.Heartbeat), global::Common.Api.Heartbeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Api.TGroupsList), global::Common.Api.TGroupsList.Parser, new[]{ "PageLimit", "OrderByAsc", "Lang", "CreatedAt", "Count", "Cursor" }, new[]{ "Filter" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Api.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Code {
        [pbr::OriginalName("RUNTIME_EXCEPTION")] RuntimeException = 0,
      }

    }
    #endregion

  }

  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Api.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      collationId_ = other.collationId_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case PayloadOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case PayloadOneofCase.Groups:
          Groups = other.Groups.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "collation_id" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private int collationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollationId {
      get { return collationId_; }
      set {
        collationId_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Api.Error Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (global::Common.Api.Error) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Error;
      }
    }

    /// <summary>Field number for the "Heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Api.Heartbeat Heartbeat {
      get { return payloadCase_ == PayloadOneofCase.Heartbeat ? (global::Common.Api.Heartbeat) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Api.TGroupsList Groups {
      get { return payloadCase_ == PayloadOneofCase.Groups ? (global::Common.Api.TGroupsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Groups;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Error = 2,
      Heartbeat = 3,
      Groups = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Groups, other.Groups)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId != 0) hash ^= CollationId.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Groups) hash ^= Groups.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        output.WriteRawTag(26);
        output.WriteMessage(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        output.WriteRawTag(34);
        output.WriteMessage(Groups);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Groups);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.CollationId != 0) {
        CollationId = other.CollationId;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          Error = other.Error;
          break;
        case PayloadOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat;
          break;
        case PayloadOneofCase.Groups:
          Groups = other.Groups;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CollationId = input.ReadInt32();
            break;
          }
          case 18: {
            global::Common.Api.Error subBuilder = new global::Common.Api.Error();
            if (payloadCase_ == PayloadOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 26: {
            global::Common.Api.Heartbeat subBuilder = new global::Common.Api.Heartbeat();
            if (payloadCase_ == PayloadOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 34: {
            global::Common.Api.TGroupsList subBuilder = new global::Common.Api.TGroupsList();
            if (payloadCase_ == PayloadOneofCase.Groups) {
              subBuilder.MergeFrom(Groups);
            }
            input.ReadMessage(subBuilder);
            Groups = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Api.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TGroupsList : pb::IMessage<TGroupsList> {
    private static readonly pb::MessageParser<TGroupsList> _parser = new pb::MessageParser<TGroupsList>(() => new TGroupsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Api.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList(TGroupsList other) : this() {
      pageLimit_ = other.pageLimit_;
      orderByAsc_ = other.orderByAsc_;
      cursor_ = other.cursor_;
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList Clone() {
      return new TGroupsList(this);
    }

    /// <summary>Field number for the "page_limit" field.</summary>
    public const int PageLimitFieldNumber = 1;
    private long pageLimit_;
    /// <summary>
    //// Upper limit on the maximum number of groups to return per request. Max value is 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageLimit {
      get { return pageLimit_; }
      set {
        pageLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_by_asc" field.</summary>
    public const int OrderByAscFieldNumber = 2;
    private bool orderByAsc_;
    /// <summary>
    //// Whether to order the result ascending or descending based on the filters defined below.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrderByAsc {
      get { return orderByAsc_; }
      set {
        orderByAsc_ = value;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 3;
    /// <summary>
    //// Find groups matching the given language tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return filterCase_ == FilterOneofCase.Lang ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Lang;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    /// <summary>
    //// Find groups created after a given time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return filterCase_ == FilterOneofCase.CreatedAt ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CreatedAt;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    /// <summary>
    //// Find groups that have members up to (and equal to) the count value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return filterCase_ == FilterOneofCase.Count ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.Count;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 7;
    private string cursor_ = "";
    /// <summary>
    //// Binary cursor value used to paginate results.
    //// The value of this comes from TGroups.cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      Lang = 3,
      CreatedAt = 4,
      Count = 5,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageLimit != other.PageLimit) return false;
      if (OrderByAsc != other.OrderByAsc) return false;
      if (Lang != other.Lang) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Count != other.Count) return false;
      if (Cursor != other.Cursor) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageLimit != 0L) hash ^= PageLimit.GetHashCode();
      if (OrderByAsc != false) hash ^= OrderByAsc.GetHashCode();
      if (filterCase_ == FilterOneofCase.Lang) hash ^= Lang.GetHashCode();
      if (filterCase_ == FilterOneofCase.CreatedAt) hash ^= CreatedAt.GetHashCode();
      if (filterCase_ == FilterOneofCase.Count) hash ^= Count.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageLimit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PageLimit);
      }
      if (OrderByAsc != false) {
        output.WriteRawTag(16);
        output.WriteBool(OrderByAsc);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        output.WriteRawTag(26);
        output.WriteString(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        output.WriteRawTag(40);
        output.WriteInt64(Count);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageLimit);
      }
      if (OrderByAsc != false) {
        size += 1 + 1;
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsList other) {
      if (other == null) {
        return;
      }
      if (other.PageLimit != 0L) {
        PageLimit = other.PageLimit;
      }
      if (other.OrderByAsc != false) {
        OrderByAsc = other.OrderByAsc;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageLimit = input.ReadInt64();
            break;
          }
          case 16: {
            OrderByAsc = input.ReadBool();
            break;
          }
          case 26: {
            Lang = input.ReadString();
            break;
          }
          case 32: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 40: {
            Count = input.ReadInt64();
            break;
          }
          case 58: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
